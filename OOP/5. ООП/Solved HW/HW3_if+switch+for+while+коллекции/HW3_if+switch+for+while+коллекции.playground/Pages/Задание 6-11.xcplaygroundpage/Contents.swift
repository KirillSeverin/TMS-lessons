//: [Previous](@previous)

import Foundation

/*:
 ### Задание 6
 1.1 Пользователь открывает вклад (deposit) в банке на 5 лет на сумму 500 тыс. рублей. Процентная ставка годовых (rate) составляет 11%. Цифры могут быть любыми, это не принципиально. Необходимо просчитать сумму дохода (profit) по окончании срока действия (period) вклада.
 
 1.2 Выведите результат на консоль в таком виде: "Сумма вклада через <... > лет увеличится на <...> и составит <...>"
 */

var deposit = 500_000
let rate = 11
let period = 5
var profit = 0

for _ in 1...period {
    let currentProfit = deposit * rate / 100
    profit += currentProfit
    deposit += currentProfit
}

print("Сумма вклада через \(period) лет увеличется на \(profit) рубля и составит \(deposit) рублей")

/*:
 ### Задание 7
 2.1 Создайте целочисленные переменные `base` и `power` с любым значениями на ваше усмотрение.
 
 2.2 При помощи цикла `for in` возведите переменную `base` в степень `power` и присвойте результат переменной `result`
 
 2.3 Выведите результат на консоль в следующем виде: «<…> в <…> степени равно <…>»
 */

let base = 2
let power = 10
var result = base

for _ in 1..<power {
    result *= base
}

print("При возведении \(base) в степень \(power), получится \(result)")

/*:
 ### Задание 8
 3.1 Создайте целочисленный массив данных с любым набором чисел.
*/

let arrayOfNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

//: 3.2 Выведите на консоль все четные числа из массива

for evenNumber in arrayOfNumbers {
    if evenNumber % 2 == 0 { // либо же так -> if evenNumber.isMultiple(of: 2) {
        print("Четные: \(evenNumber)")
    }
}

// дополнительные массивы не нужны

//: 3.3 Используя оператор Continue выведите на консоль все нечетные числа из массива. Оператор continue предназначен для перехода к очередной итерации, игнорируя следующий за ним код. Т.е. вам нужно выполнить проверку на четность числа, и если оно оказалось четным перейти к следующей итерации.

for oddNumber in arrayOfNumbers {
    if oddNumber % 2 == 0 {
        continue // пропускаем все что дальше
    }
    print("Не четные: \(oddNumber)")
}

//: ### Задание 9
//: 4.1 Создайте цикл (интревал можно задать от 1 до 10) в котором будет случайным образом вычисляться число в пределах от 1 до 10. Если число будет равно 5, выведите на коносль сообщение с номером итерации, например (Что бы выпало число 5 понадобилось 3 итерации) и остановите цикл. Для остановки цикла используйте оператор breack. Оператор break предназначен для досрочного завершения работы цикла. При этом весь последующий код в теле цикла игнорируется.

for counter in 1...10 {
    let randomNumber = Int.random(in: 1...10)
    if randomNumber == 5 {
        print("Что бы выпало число 5 понадобилось \(counter) итераций")
        break
    }
}

// counter не нужно создавать вне цикла

/*:
 ### Задание 10
 5.1 На 10 метровый столб лезет черепашка. За день она забирается на два метра, за ночь съезжает на 1. Определите при помощи цикла, через сколько дней она заберетсья на столб. Подумайте над тем, какой цикл использовать в этой ситуации.
 */

var distance = 0
var numberOfDays = 0
var isDay = true

while distance != 10 {
    if isDay {
        distance += 2
        numberOfDays += 1
        isDay = false
    } else {
        distance -= 1
        isDay = true
    }
}

numberOfDays

/*:
 Задание 11
 >Очень сложное заданиe, не обязательно, только для желающих
 
 6.1 Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
 
1 Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
 
2 Пусть переменная p изначально равна двум — первому простому числу.
 
3 Зачеркнуть в списке числа от 2p до n считая шагами по p (это будут числа кратные p: 2p, 3p, 4p, ...).
 
4 Найти первое незачёркнутое число в списке, большее чем p, и присвоить значению переменной p это число.
 
5 Повторять шаги 3 и 4, пока возможно.
 
Используйте оператор brack для прерывания итераций в цикле.
 
 */

var primeNumbers = [Int]() // 2, 3
var primeNumber = 2 // простое первое число -> 2
var currentNumber = primeNumber // старт -> 2 // после 1 цикла -> 3 // после 2 цикла -> 4

while primeNumbers.count < 100 { // пока не заполним
    
    for pn in 2...currentNumber { // pn = 2 // pn = 3
        if currentNumber % primeNumber == 0 { // делится ли без остатка?
            break
        }
        primeNumber = pn
    }
    
    if primeNumber == currentNumber {
        primeNumbers.append(currentNumber)
    }
    
    currentNumber += 1 // увеливаем счетчик
}

print("Количество элементов массива:", primeNumbers.count)
print(primeNumbers)


// Способ 2

let neededNumberForArray = 100

var finalArray = [Int]() // 2, 3
var auxiliarySet: Set<Int> = [] // вспомогательное множество

var currentValue = 2 // 2

while finalArray.count < neededNumberForArray {
    if !auxiliarySet.contains(currentValue) { // currentValue не содержится в auxiliarySet?
        finalArray.append(currentValue)
        for multiplier in 1...(neededNumberForArray * 10 / currentValue) { // 500 раз в первый раз
            auxiliarySet.insert(currentValue * multiplier) // 2, 4, 6, 8... // 3, 6, 9, 12... // 5, 10, 15
        }
    }
    currentValue += 1
}


print("Колличество элементов массива: \(finalArray.count).\n", finalArray)
